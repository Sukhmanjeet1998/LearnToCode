1) Introduction to Javascript.

2) Setting up environment in local machine .
Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to execute JavaScript code outside of a web browser. It is built on the Chrome V8 JavaScript engine, which powers Google Chrome, and it provides a way to run JavaScript on servers, enabling server-side scripting.

3) Save and Work on Github.

4) Let vs Var vs Const
Let and Const is local scope Variable (use)
Var is global scope variableb (never use)

and more differences...

5) DataTypes and ECMAScript!
DataTypes: Types of Data stored in a variable.

ECMAScript (ES) is a standardized specification for scripting languages, and JavaScript is the most well-known implementation of the ECMAScript standard. The ECMAScript specification defines the syntax, semantics, and behavior of the JavaScript language.

6) DataType conversion confusion

7) Why string to number conversion is confusing!

8) Comparison

9) Data Type
In programming, a string is a sequence of characters enclosed within either single quotes (') or double quotes ("). Strings can contain letters, numbers, symbols, and whitespace characters.

10) Stack (Primitive {gets value}) and Heap (Non Primitive {gets Refrence})
In JavaScript, memory management is abstracted away from the developer, and the specifics of stack and heap memory management are typically not directly exposed or controlled. However, JavaScript does use both stack and heap memory internally, and understanding their roles can help in understanding how JavaScript operates.

Object : When dealing with objects in JavaScript, variables store references (memory addresses) to the actual objects stored in the heap. This means that when you modify an object through one reference, the changes are reflected across all references pointing to that object.

11) Strings 
String Interpolation : Injecting variables in string via Template Strings {use back-ticks (``) rather than the quotes ("") to define a string} .

12) Number and Maths

13)

14)

15)

17)

18)

19)

20)

42) Yes, Javascript does have classes. This feature was introduced with the ECMAScript 2015 specification(often referred as ES6). However, it's important to note that Javascript is primarily prototype-based language, and its classes are primarily syntactic sugar over existing prototype-based inheritance mechanisms. In other words its provides a more familiar syntax for developers coming from class-based languages such as Java or C++,but under the hood it works somewhat differently.

"Object literals" and "objects" are related concepts in JavaScript, but they are not exactly the same thing.

An "object" in JavaScript is a data structure that allows you to store key-value pairs. It is a fundamental data type in JavaScript and can hold properties and methods. Objects can be created in various ways, including using object literals, constructor functions, and the Object.create() method.

An "object literal" is one way of creating an object in JavaScript. It's a syntactic notation for creating objects using curly braces {} and specifying key-value pairs inside those braces. When you create an object using an object literal, you define its properties and methods directly in the code.

Yes, essentially, an "object" is the overarching concept, while an "object literal" is a specific syntax used to create objects in JavaScript. Object literals are a convenient way to define objects directly within your code, but they are just one of several methods available for creating objects.

Not to repeat objects again of same properties and method we use constructor.

new : constructor function.

new -> empty object create (new instance) -> constructor function called because of new keyword with arguments passed -> return this;